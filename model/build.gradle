apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.squareup.sqldelight'
apply from: '../AndroidCodeQualityConfig/quality.gradle'

def isTravis = "true".equals(System.getenv("TRAVIS"))

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    versionCode rootProject.ext.versionCode
    versionName rootProject.ext.versionName

    multiDexEnabled true
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = false
    javaMaxHeapSize "4g"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/maven/com.google.dagger/dagger/pom.properties'
    exclude 'META-INF/maven/com.google.dagger/dagger/pom.xml'
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams = true
    }
  }

  if (isTravis) {
    lintOptions {
      abortOnError false
    }
  }
}

unMock {
  downloadFrom 'https://oss.sonatype.org/content/groups/public/org/robolectric/android-all/6.0.0_r1-robolectric-0/android-all-6.0.0_r1-robolectric-0.jar'
  downloadTo "${System.getenv('HOME')}/.gradle/caches/"

  keep "android.text.TextUtils"
}

dependencies {
  def modelDependencies = rootProject.ext.modelDependencies
  def aptDependencies = rootProject.ext.aptDependencies
  def testDependencies = rootProject.ext.testDependencies

  compile project(':base')

  compile 'com.infstory:auto-cursor:1.0.0'
  annotationProcessor 'com.infstory:auto-cursor-processor:1.0.0'

  compile modelDependencies.parse
  compile modelDependencies.rxparse

  compile modelDependencies.multiDex

  annotationProcessor aptDependencies.daggerApt
  provided aptDependencies.autoValue // used for AndroidStudio sync
  annotationProcessor(aptDependencies.autoParcelApt) {
    exclude module: 'auto-value'
  }
  // used for AndroidStudio sync
  provided(aptDependencies.autoGsonApt) {
    exclude module: 'auto-value'
  }
  retrolambdaConfig aptDependencies.retrolambda
  errorprone aptDependencies.errorprone

  // for SqlDelight support of OkBuck
  provided aptDependencies.sqlDelightBin

  testCompile project(':testbase')
  testCompile testDependencies.mockito
  testCompile testDependencies.junit
  testCompile testDependencies.jsonAssert

  androidTestCompile project(':testbase')
  androidTestCompile testDependencies.multidexInstrumentation
  androidTestCompile(testDependencies.mockito) {
    exclude module: 'hamcrest-core'
  }
  androidTestCompile testDependencies.dexmaker
  androidTestCompile(testDependencies.dexmakerMockito) {
    exclude module: 'hamcrest-core'
    exclude module: 'mockito-core'
  }
  androidTestCompile testDependencies.jsonAssert
  androidTestCompile(testDependencies.androidJUnitRunner) {
    exclude module: 'support-annotations'
  }
}
