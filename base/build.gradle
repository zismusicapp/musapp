apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'net.ltgt.errorprone'
apply from: '../AndroidCodeQualityConfig/quality.gradle'

def isTravis = "true".equals(System.getenv("TRAVIS"))

android {
  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion
    versionCode rootProject.ext.versionCode
    versionName rootProject.ext.versionName
  }

  buildTypes {
    debug {
      testCoverageEnabled = true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams = true
    }
  }

  if (isTravis) {
    lintOptions {
      abortOnError false
    }
  }
}

unMock {
  downloadFrom 'https://oss.sonatype.org/content/groups/public/org/robolectric/android-all/6.0.0_r1-robolectric-0/android-all-6.0.0_r1-robolectric-0.jar'
  downloadTo "${System.getenv('HOME')}/.gradle/caches/"

  keep "android.os.Looper"
  keep "android.content.ContentValues"
  keepStartingWith "android.util."
}

dependencies {
  def baseDependencies = rootProject.ext.baseDependencies
  def aptDependencies = rootProject.ext.aptDependencies
  def testDependencies = rootProject.ext.testDependencies

  compile baseDependencies.recyclerViewV7
  compile baseDependencies.cardViewV7
  compile baseDependencies.percentageLayout
  compile baseDependencies.design

  compile baseDependencies.androidSupportAppCompatV7

  compile baseDependencies.typeKit

  compile(baseDependencies.safelyAndroid) {
    exclude module: 'appcompat-v7'
  }

  compile baseDependencies.javaxAnnotation

  compile(baseDependencies.mvp) {
    exclude module: 'appcompat-v7'
    exclude module: 'support-annotations'
  }
  compile baseDependencies.rxJava
  compile(baseDependencies.rxAndroid) {
    exclude module: 'rxjava'
  }
  compile(baseDependencies.rxBinding) {
    exclude module: 'rxjava'
    exclude module: 'rxandroid'
    exclude module: 'support-annotations'
  }
  compile(baseDependencies.rxBindingAppCompatV7) {
    exclude module: 'appcompat-v7'
    exclude module: 'rxbinding'
  }
  compile(baseDependencies.rxLifeCycle) {
    exclude module: 'rxjava'
    exclude module: 'rxbinding'
    exclude module: 'support-annotations'
  }
  compile(baseDependencies.rxLifeCycleComponent) {
    exclude module: 'rxjava'
    exclude module: 'rxlifecycle'
    exclude module: 'appcompat-v7'
  }
  compile (baseDependencies.mockedWebServerImpl) {
    exclude module: 'junit'
  }
  compile baseDependencies.downloadManager
  compile baseDependencies.eventBus
  compile baseDependencies.dagger
  compile baseDependencies.butterKnife
  compile baseDependencies.sqlDelightRuntime

  compile baseDependencies.gson
  compile baseDependencies.okHttp
  compile(baseDependencies.retrofit) {
    exclude module: 'okhttp'
  }
  compile(baseDependencies.retrofitGsonConverter) {
    exclude module: 'gson'
  }
  compile(baseDependencies.retrofitRxJavaAdapter) {
    exclude module: 'rxjava'
  }
  compile(baseDependencies.sqlBrite) {
    exclude module: 'support-annotations'
    exclude module: 'rxjava'
  }

  compile baseDependencies.threetenabp
  compile baseDependencies.autoBundle
  compile(baseDependencies.onActivityResult) {
    exclude module: 'support-annotations'
  }

  compile baseDependencies.timber
  compile baseDependencies.okHttpLogging
  compile(baseDependencies.ok2Curl) {
    exclude module: 'okhttp'
  }
  compile(baseDependencies.stethoOkhttp) {
    exclude module: 'okhttp'
  }

  provided aptDependencies.autoValue // used for AndroidStudio sync
  apt aptDependencies.daggerApt
  apt aptDependencies.autoParcelApt
  retrolambdaConfig aptDependencies.retrolambda
  errorprone aptDependencies.errorprone

  testCompile project(':testbase')
  testCompile(testDependencies.junit) {
    exclude module: 'hamcrest-core'
  }
  testCompile testDependencies.mockito
}
