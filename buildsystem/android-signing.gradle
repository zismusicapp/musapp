def productionProperties = "../production.properties"
def signingKeys = [
        STORE_FILE: { x -> file(x) },
        STORE_PASSWORD: { x -> x },
        KEY_ALIAS: { x -> x },
        KEY_PASSWORD: { x -> x },
]

// Find signing.properties in project root, or in $HOME/.gradle
def f = ["${rootDir}/${productionProperties}", "${gradle.gradleUserHomeDir}/${productionProperties}"].find {
  file(it).exists()
}

if (f) {
  logger.info "Loading signing properties from ${f}"
  def props = new Properties()
  props.load(new FileInputStream(f))

  // For each property apply it to the production signing config
  signingKeys.any { k, fn ->
    if (!props.containsKey(k)) {
      logger.error "Missing property ${k}"
      android.buildTypes.release.signingConfig = null
      return true
    }
    android.signingConfigs.production[k] = fn(props[k]);
    return
  }
} else {
  logger.info "Missing ${productionProperties} file"
  android.buildTypes.debug.signingConfig = null
}

//for develop type

def developProperties = "../develop.properties"
def developKeys = [
        STORE_FILE: { x -> file(x) },
        STORE_PASSWORD: { x -> x },
//        keyAlias: { x -> x },
//        keyPassword: { x -> x }
//        ,
]

// Find signing.properties in project root, or in $HOME/.gradle
f = ["${rootDir}/${developProperties}", "${gradle.gradleUserHomeDir}/${developProperties}"].find {
  file(it).exists()
}

if (f) {
  logger.info "Loading signing properties from ${f}"
  def props = new Properties()
  props.load(new FileInputStream(f))

  // For each property apply it to the develop signing config
  developKeys.any { k, fn ->
    if (!props.containsKey(k)) {
      logger.error "Missing property ${k}"
      android.buildTypes.debug.signingConfig = null
      return true
    }
    android.signingConfigs.develop[k] = fn(props[k]);
    return
  }
} else {
  logger.info "Missing ${developProperties} file"
  android.buildTypes.release.signingConfig = null
}